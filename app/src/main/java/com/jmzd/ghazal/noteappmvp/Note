toolbar vs materialToolbar--------------------------------------------------------------------------
توی تولبار معمولی تکست در سمت چپ قرار میگیرد ولی در متریال میشود وسط قرار داد

menu ----------------------------------------------------------------------------------------------
در ساخت منو با ویژگی هایی مثل تایتل و آیکون و رنگ آیکون قبلا آشنا شدیم.

app:showAsAction="ifRoom|collapseActionView"
app:showAsAction="always"
ویژگی های بالا مشخص میکنه که توی چه شرایطی نشون بده اون ایتم را
    ifRoom:
    اگه جا بود
    collapseActionView :
    حالت ضربدر و اینجور چیزا را برامون میاره
    always:
    همیشه اون بالا نشونش بده بهمون
اگه این showAsAction ها را قرار ندیم توی نمایش منو حالت آپشن منو میاره. نه که داخل خود تولبار بچینه آیکون ها را

app:actionViewClass="androidx.appcompat.widget.SearchView"
میخوایم وقتی روی سرچ زدیم خیلی نرم باز و بسبته شه
این عملیات در واقع مربوط به یک کلاسی است که مال خود اندروید است و ما الان میخوایم این کلاس را داخل منو مون قرار بدیم
این منو ره از اون کلاسی که توی اندروید وجود داره ارث بری کنه و ساخته شه

باز شدن فرگمنت ها از پایین-------------------------------------------------BottomSheetDialogFragment
احتمالا توی بعضی از اپلیکشن ها دیدید
برای انجام یک کار خاص یک بخشی از پایین باز میشه. کارتونو انجام میدین و اون بخش بسته میشه
برای این کار لازمه که فرگمنت معمولیمون رو تبدیل کنیم به BottomSheetDialogFragment
پس به جای ارث بری از Fragment() ارث بری میکنیم از BottomSheetDialogFragment
از این به بعد از پاییین باز میشه و برای باز و بسته شدن هم روش خاص خودشو داره که جلوتر یاد میگیریم

باز کردن :
قبلا میومدیم فرگمنت را داخل یک ویوی دیگه به اسم container باز میکردیم
ولی توی این نوع فرگمنت داستان فرق میکنه و در واقع از خاصیت دیالوگ بودن استفاده میکنه
توی دیالوگ برای نمایش از show استفاده میکنیم و برای بستنش از dismiss استفاده میکنیم
fragmentName().show(fragmentManager , tag)
تگ برای مدیریت استک استفاده میشه
NoteFragment().show(supportFragmentManager, NoteFragment().tag)

گرد کردن بک گراند فرگمنت:
شاید بگید خب خیلی راحت یک بک گراند طراحی میکنیم و میدیم بهش
ولی این روش کار نمیکنه و حتما باید استایل نوشته شه براش

بستن:
this@FragmentName.dismiss()
حتی روی فضای خالی اپلیکیشن بزنیم هم بسته میشه


Spinner-------------------------------------------------------------------------------------
برای طراحی اسپیرها
۱- از کارد ویو استفاده میکنیم چون اسپینرها به صورت دیفات یک حالت فلتی دارن که چندان جذاب نیست
۲- برای سایز اسپینر عدد میدیم بهش
چون به صورت پیش فرض اسپینر از wrap استفاده میکنه
اگه سایز ندیم کلا اندازه تکست داخلش بزرگ میشه
بزرگ کوچیک میشه در نتیجه و ui را به میریزه

پر کردن اسپینرها:
میخواهیم این کار را با آداپتر پیش فرض خودشون انجام بدیم
۱- یک لیست خالی میسازیم. (باید از  نوع آرایه باشه)
۲- لیستی که ساختیم را پر میکنیم
۳- تعریف آداپتر ( مثل ریسایکلر ویو نمیایم از آداپترهای کاستوم استفاده کنیم و از آداپتر دیفالت خودش استفاده میکنیم)
۴- از onItemSelectedListener برای دسترسی به آیتم سلکت شده استفاده میکنیم

Data-------------------------------------------------------------------------------------------------
1- repository
2- base
مواردی که در ۹۰ درصد کلاس های پرزنتر یا ویو قرار است مشترک باشد را در بیس تعریف میکردیم
3- Contracts
    View
    Presenter
4- presenter

پرزنتر باید چند تا چیز توی ورودی بگیره
اولیش که ریپازیتوری است که تامین کننده اطلاعات است
دومیش اینترفیس ویو است که در کانترکت تعریف کردیم. چون میخوایم به فانکشن هاش دسترسی داشته باشیم
مثلا بفهمیم وقتی الاعات اومد باید close را صدا بزنیم

پرزنتر باید از دو تا چیز ارث بری کنه
اولیش از پرزنتری که در کانترکت تعرییف کردیم
همچنین باید از BasePresenterImpl هم ارث بری کنیم که متدهای مشترک پرزنتر توش نوشته شده
سپس متدهای مربوط به پرزنتر کانترکت اورراید میشن

5- fragment
همون ور که توی پرزنتر از پرزنتز کانترکت ارث بری کردیم و متدهاشو اورراید کردیم
میایم توی فرگمنت هم از ویوی کانترکت ارث بری میکنیم و متدهاشو اورراید میکنیم تا بدنه شونو بنویسیم

سپس خود پرزنتر را از طرق شی گرایی یا تزریق وابستگی میسازیم

Dependency Injection---------------------------------------------------------------------------------
تامین وابستگی های مربوط به اینترفیس های ویو و ریپازیتوری
پرزنتر را چطور باید تامین کرد و دسترسی داشت؟
دو تا وروردی داره. اولیش ریپازیتوری و دومیش اینترفیس ویو.
تامین ریپازیتوری را که قبلا یاد گرفتیم با تزریق وابستگی
در حالت شی گرایی در فرگمنت از اینترفیس ویو ارث بری میکنیم و با کلمه کلیدی this پاسش میدیم به شی
برای تامین کردن این اینترفیس ها باید چیکار کنیم؟

1: activity mode
0-
برای این کار میخوایم یکی کلاس کلی بنویسیم
( مثل ماژولی که تمام وابستگی های مربوط به دیتابیس را تامین میکرد برامون)
میخوایم همه چیزای مربوط به ویو همه اکتیویتی ها را داخل این ماژول بذاریم
برای این منظور ContractsViewModuleAC را میسازیم که ac مخفف اکتیویتی است
شاید بپرسید چرا اکتیویتی؟ برا فرگمنت هم داریم مگه؟
جواب بله هست و چراشو جلوتر میفهمیم
(یادآوری: فرقی نداره آبجکت بسازیم یا کلاس یا... همه ش درسته و روش های مختلفه)

نکته :
میایم InstallIn را اکتیویتی میذاریم ولی چرا؟
(مثلا برای دیتابیس سینگل تون کامپننت قرار میدادیم)
ماژولی که برای کانترکت های مربوط به ویویی میسازیم که برای اکتیویتیه
یعنی چی؟
ویوی من در Main الان داره روی چه لایف سایکلی کار میکنه؟ اکتیویتی
پس این ماژول کلی را برای ویوهایی که داخل اکتیویتی تعریف میشن قرار میدیم

**** تامین وابستگی چیزی که داره implement میشه****
این مورد حتی توی استک اور  فلو احتمالا پیدا نشه
1-
میایم اول انوتیشن provides را قرار میدیم
2-
اسم متد مورد نظر را مینویسم
اینجا میشه mainView
3-
توی اکتیوتی از چی ارث بری کرده بودیم؟ MainContracts.View
اینجا هم دقیقا از MainContracts.View ارث بری میکنیم
4-
این ویوی من داخل چه چیزی داشت implement میشد؟ اکتیویتی
( اینجا منظور اکتیوتی خاصی نیست. در واقع سوال اینه که داخل اکیتیوتی داره implement میشه یا فرگمنت)
پس میایم این اکیتیوتی را داخل ورودی متدم بهش میدم که این بفهمه
چیزی که داره اینجا implement میشه در داخل یک اکتیویتی قراره استفاده شه
5-
حالا این اکتیویتی که اینجا هست قراره از چه چیزی ساخته شه و برای من تزریق کنه؟
اون جنسی که داره ازش ساخته میشه MainContracts.View است
عملگر as توی کاتلین معادل همون پرانتزی هست که برای cast کردن پشت ویو ها میذاشتیم در جاوا
یعنی از چه چیزی ساخته شده؟ مثلا تکست ویو از ویو ساخته شده...
و باید این را return کنیم که معادل همون ارث بریه بشه
6-
با استفاده از انوتیشن inject این وابستگی که تامین کردیم را در اکتیویتی تزریق میکنیم
7-
وابستگی مربوط به اینترفیس ویو در کل اپ و در ریپازیتوری و اکتیویتی تامین شد

2: fragment mode
تقریبا مشابه اکتیویتی است
0-
برای این مورد هم مجدد یک کلاس کلی مینویسیم برای همه فرگمنت های اپ
این سری installIn را FragmentComponent قرار میدیم
ما بقی مثل حالت قبل پیش میره
.
.
.
4-
توی ورودی به جای اکتیوتی بهش فرگمنت را پاس میدیم فقط


نکته: بعد از اضافه کردن این موارد یک بار پروژه را clean/rebuild کنید


نکته مهم: هندل کردن کرش جا به جایی سریع بین فرگمنت ها --------------------------------------100#-

 * بعضی وقت ها که کاربر مدام و پشت سر هم با سرعت زیاد این صفحه رو بزنه باز و بسته کنه
 * اطلاعات نصفه میاد دوباره بسته میشه و....
 * ترد ui من در این حالت از دسترس خارج میشه
 * شاید بگید توی پرزنتر خب ترد ui را دادیم بهش با rx
 * ولی ترد ui را برای چه کاری دادیم؟ برای دریافت اطلاعات
 * ولی مساله اینه که اینجا ما اصلا دسترسی به ویو ها نداریم در این حالت که بخوام اطلاعات را ست کنم
 * این اتفاقات اکثرا برای فرگمنت هایی می افته که کاربر میتونه سریع بینشون جا به جا شه
 * راه حل:
۱-
اول چک میکنیم این فرگمنتی که داریم ازش استفاده میکنیم اد شده یا نه
فرگمنت کجا اد میشه؟ به اکتیویتی اد میشه
 if (this.isAdded)
 this : اشاره به فرگمنتی که داخلشیم دارد
 تا اینجا خیالمون راحته که اگه فرگمنت اد نشه بود عملیات مربوط به مثلا لود اطلاعات در ui اتفاق نمی افته
۲-
بعد از این مرحله ترد ui را هم هندل میکنیم که اگر تحت هر شرایط ترد ui در اختیار من قرار داشت این کارها را انجام بده
 requireActivity().runOnUiThread {
 این کد مربوط به خود اندروید است و کد معروفیه


در نظر گرفتن مقدار پیش فرض برای اسپینر---------------------------------------------------------101#-
مقادیر اسپینر با index کار میکنن

